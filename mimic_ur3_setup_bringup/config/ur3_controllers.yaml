# Controller's from different packages
# - ur_robot_driver (UniversalRobots)
# - cartesian_controllers_examples (fzi-forschungszentrum-informatik)


# Section below is from: ur_robot_driver
# --------------------------------------

# Settings for ros_control control loop
hardware_control_loop:
  loop_hz: &loop_hz 125

# Settings for ros_control hardware interface
ur_hardware_interface:
  joints: &robot_joints
    - &joint1 ur3_shoulder_pan_joint
    - &joint2 ur3_shoulder_lift_joint
    - &joint3 ur3_elbow_joint
    - &joint4 ur3_wrist_1_joint
    - &joint5 ur3_wrist_2_joint
    - &joint6 ur3_wrist_3_joint

# Publish all joint states ----------------------------------
joint_state_controller:
  type:         joint_state_controller/JointStateController
  publish_rate: *loop_hz

# Publish wrench ----------------------------------
force_torque_sensor_controller:
  type:         force_torque_sensor_controller/ForceTorqueSensorController
  publish_rate: *loop_hz

# Publish speed_scaling factor
speed_scaling_state_controller:
  type:         scaled_controllers/SpeedScalingStateController
  publish_rate: *loop_hz

# Joint Trajectory Controller - position based -------------------------------
# For detailed explanations of parameter see http://wiki.ros.org/joint_trajectory_controller
scaled_pos_joint_traj_controller:
  type: position_controllers/ScaledJointTrajectoryController
  joints: *robot_joints
  constraints:
    goal_time: 0.6
    stopped_velocity_tolerance: 0.05
    *joint1: {trajectory: 0.2, goal: 0.1}
    *joint2: {trajectory: 0.2, goal: 0.1}
    *joint3: {trajectory: 0.2, goal: 0.1}
    *joint4: {trajectory: 0.2, goal: 0.1}
    *joint5: {trajectory: 0.2, goal: 0.1}
    *joint6: {trajectory: 0.2, goal: 0.1}
  stop_trajectory_duration: 0.5
  state_publish_rate: *loop_hz
  action_monitor_rate: 20

pos_joint_traj_controller:
  type: position_controllers/JointTrajectoryController
  joints: *robot_joints
  constraints:
    goal_time: 0.6
    stopped_velocity_tolerance: 0.05
    *joint1: {trajectory: 0.2, goal: 0.1}
    *joint2: {trajectory: 0.2, goal: 0.1}
    *joint3: {trajectory: 0.2, goal: 0.1}
    *joint4: {trajectory: 0.2, goal: 0.1}
    *joint5: {trajectory: 0.2, goal: 0.1}
    *joint6: {trajectory: 0.2, goal: 0.1}
  stop_trajectory_duration: 0.5
  state_publish_rate: *loop_hz
  action_monitor_rate: 20

scaled_vel_joint_traj_controller:
  type: velocity_controllers/ScaledJointTrajectoryController
  joints: *robot_joints
  constraints:
    goal_time: 0.6
    stopped_velocity_tolerance: 0.05
    *joint1: {trajectory: 0.1, goal: 0.1}
    *joint2: {trajectory: 0.1, goal: 0.1}
    *joint3: {trajectory: 0.1, goal: 0.1}
    *joint4: {trajectory: 0.1, goal: 0.1}
    *joint5: {trajectory: 0.1, goal: 0.1}
    *joint6: {trajectory: 0.1, goal: 0.1}
  gains:
    #!!These values have not been optimized!!
    *joint1: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint2: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint3: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint4: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint5: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint6: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
  # Use a feedforward term to reduce the size of PID gains
  velocity_ff:
    *joint1: 1.0
    *joint2: 1.0
    *joint3: 1.0
    *joint4: 1.0
    *joint5: 1.0
    *joint6: 1.0
  stop_trajectory_duration: 0.5
  state_publish_rate: *loop_hz
  action_monitor_rate: 20

vel_joint_traj_controller:
  type: velocity_controllers/JointTrajectoryController
  joints: *robot_joints
  constraints:
    goal_time: 0.6
    stopped_velocity_tolerance: 0.05
    *joint1: {trajectory: 0.1, goal: 0.1}
    *joint2: {trajectory: 0.1, goal: 0.1}
    *joint3: {trajectory: 0.1, goal: 0.1}
    *joint4: {trajectory: 0.1, goal: 0.1}
    *joint5: {trajectory: 0.1, goal: 0.1}
    *joint6: {trajectory: 0.1, goal: 0.1}
  gains:
    #!!These values have not been optimized!!
    *joint1: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint2: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint3: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint4: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint5: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
    *joint6: {p: 5.0, i: 0.05, d: 0.1, i_clamp: 1}
  # Use a feedforward term to reduce the size of PID gains
  velocity_ff:
    *joint1: 1.0
    *joint2: 1.0
    *joint3: 1.0
    *joint4: 1.0
    *joint5: 1.0
    *joint6: 1.0
  stop_trajectory_duration: 0.5
  state_publish_rate: *loop_hz
  action_monitor_rate: 20

# Pass an array of joint velocities directly to the joints
joint_group_vel_controller:
  type: velocity_controllers/JointGroupVelocityController
  joints: *robot_joints

forward_joint_traj_controller:
  type: pass_through_controllers/JointTrajectoryController
  joints: *robot_joints

forward_cartesian_traj_controller:
  type: pass_through_controllers/CartesianTrajectoryController
  joints: *robot_joints

twist_controller:
  type: ros_controllers_cartesian/TwistController
  frame_id: tool0_controller
  publish_rate: *loop_hz
  joints: *robot_joints

pose_based_cartesian_traj_controller:
  type: pose_controllers/CartesianTrajectoryController

  # UR driver convention
  base: base
  tip: tool0_controller
  joints: *robot_joints

joint_based_cartesian_traj_controller:
  type: position_controllers/CartesianTrajectoryController

  # UR driver convention
  base: base
  tip: tool0
  joints: *robot_joints

robot_status_controller:
  type: industrial_robot_status_controller/IndustrialRobotStatusController
  handle_name: industrial_robot_status_handle
  publish_rate: 10


# Section below is from: cartesian_controllers_examples
# -----------------------------------------------------

my_cartesian_motion_controller:
  type: "position_controllers/CartesianMotionController"
  robot_base_link: "ur3_base_link"
  end_effector_link: "robotiq_2f140_tcp"
  target_frame_topic: "target_frame"
  joints: *robot_joints

  pd_gains:
    trans_x: {p: 10.0}
    trans_y: {p: 10.0}
    trans_z: {p: 10.0}
    rot_x: {p: 1.0}
    rot_y: {p: 1.0}
    rot_z: {p: 1.0}

my_cartesian_force_controller:
  type: "position_controllers/CartesianForceController"
  robot_base_link: "ur3_base_link"
  end_effector_link: "robotiq_2f140_tcp"
  ft_sensor_ref_link: "robotiq_ft300_frame_id"
  joints: *robot_joints

  solver:
    error_scale: 0.5

  pd_gains:
    trans_x: {p: 0.05}
    trans_y: {p: 0.05}
    trans_z: {p: 0.05}
    rot_x: {p: 1.5}
    rot_y: {p: 1.5}
    rot_z: {p: 1.5}

  # Gravity should point towards the center of earth.
  # In robot_base_link.
  gravity:
    x: 0
    y: 0
    z: -9.81

  tool:
    # Mass of everything that's mounted after the sensor.
    mass: 2.23

    # The center of mass in the ft_sensor_ref_link.
    # Take a measure and try to estimate that as good as possible.
    com_x: -0.036
    com_y: 0.0
    com_z: 0.088
